// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BlockExternal.proto

#include "BlockExternal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace block_external {
namespace v1 {
PROTOBUF_CONSTEXPR Block_Key::Block_Key(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.y_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Block_KeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Block_KeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Block_KeyDefaultTypeInternal() {}
  union {
    Block_Key _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Block_KeyDefaultTypeInternal _Block_Key_default_instance_;
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cur_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.prev_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contained_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mined_by_)*/nullptr
  , /*decltype(_impl_.unix_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.ledger_id_)*/uint64_t{0u}
  , /*decltype(_impl_.mining_points_)*/uint64_t{0u}
  , /*decltype(_impl_.luck_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
}  // namespace v1
}  // namespace block_external
static ::_pb::Metadata file_level_metadata_BlockExternal_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_BlockExternal_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_BlockExternal_2eproto = nullptr;

const uint32_t TableStruct_BlockExternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block_Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block_Key, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block_Key, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.cur_hash_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.prev_hash_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.unix_timestamp_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.mined_by_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.ledger_id_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.mining_points_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.luck_),
  PROTOBUF_FIELD_OFFSET(::block_external::v1::Block, _impl_.contained_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::block_external::v1::Block_Key)},
  { 8, -1, -1, sizeof(::block_external::v1::Block)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::block_external::v1::_Block_Key_default_instance_._instance,
  &::block_external::v1::_Block_default_instance_._instance,
};

const char descriptor_table_protodef_BlockExternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023BlockExternal.proto\022\021block_external.v1"
  "\"\341\001\n\005Block\022\020\n\010cur_hash\030\001 \001(\014\022\021\n\tprev_has"
  "h\030\002 \001(\014\022\026\n\016unix_timestamp\030\003 \001(\004\022.\n\010mined"
  "_by\030\004 \001(\0132\034.block_external.v1.Block.Key\022"
  "\021\n\tledger_id\030\005 \001(\004\022\025\n\rmining_points\030\006 \001("
  "\004\022\014\n\004luck\030\007 \001(\001\022\026\n\016contained_data\030\010 \001(\014\032"
  "\033\n\003Key\022\t\n\001x\030\001 \001(\014\022\t\n\001y\030\002 \001(\014b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_BlockExternal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_BlockExternal_2eproto = {
    false, false, 276, descriptor_table_protodef_BlockExternal_2eproto,
    "BlockExternal.proto",
    &descriptor_table_BlockExternal_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_BlockExternal_2eproto::offsets,
    file_level_metadata_BlockExternal_2eproto, file_level_enum_descriptors_BlockExternal_2eproto,
    file_level_service_descriptors_BlockExternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_BlockExternal_2eproto_getter() {
  return &descriptor_table_BlockExternal_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_BlockExternal_2eproto(&descriptor_table_BlockExternal_2eproto);
namespace block_external {
namespace v1 {

// ===================================================================

class Block_Key::_Internal {
 public:
};

Block_Key::Block_Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:block_external.v1.Block.Key)
}
Block_Key::Block_Key(const Block_Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block_Key* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x().empty()) {
    _this->_impl_.x_.Set(from._internal_x(), 
      _this->GetArenaForAllocation());
  }
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_y().empty()) {
    _this->_impl_.y_.Set(from._internal_y(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:block_external.v1.Block.Key)
}

inline void Block_Key::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Block_Key::~Block_Key() {
  // @@protoc_insertion_point(destructor:block_external.v1.Block.Key)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block_Key::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x_.Destroy();
  _impl_.y_.Destroy();
}

void Block_Key::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block_Key::Clear() {
// @@protoc_insertion_point(message_clear_start:block_external.v1.Block.Key)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x_.ClearToEmpty();
  _impl_.y_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block_Key::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block_Key::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:block_external.v1.Block.Key)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes x = 1;
  if (!this->_internal_x().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_x(), target);
  }

  // bytes y = 2;
  if (!this->_internal_y().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:block_external.v1.Block.Key)
  return target;
}

size_t Block_Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:block_external.v1.Block.Key)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes x = 1;
  if (!this->_internal_x().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x());
  }

  // bytes y = 2;
  if (!this->_internal_y().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block_Key::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block_Key::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block_Key::GetClassData() const { return &_class_data_; }


void Block_Key::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block_Key*>(&to_msg);
  auto& from = static_cast<const Block_Key&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:block_external.v1.Block.Key)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_x().empty()) {
    _this->_internal_set_x(from._internal_x());
  }
  if (!from._internal_y().empty()) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block_Key::CopyFrom(const Block_Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:block_external.v1.Block.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block_Key::IsInitialized() const {
  return true;
}

void Block_Key::InternalSwap(Block_Key* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x_, lhs_arena,
      &other->_impl_.x_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.y_, lhs_arena,
      &other->_impl_.y_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Block_Key::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_BlockExternal_2eproto_getter, &descriptor_table_BlockExternal_2eproto_once,
      file_level_metadata_BlockExternal_2eproto[0]);
}

// ===================================================================

class Block::_Internal {
 public:
  static const ::block_external::v1::Block_Key& mined_by(const Block* msg);
};

const ::block_external::v1::Block_Key&
Block::_Internal::mined_by(const Block* msg) {
  return *msg->_impl_.mined_by_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:block_external.v1.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_hash_){}
    , decltype(_impl_.prev_hash_){}
    , decltype(_impl_.contained_data_){}
    , decltype(_impl_.mined_by_){nullptr}
    , decltype(_impl_.unix_timestamp_){}
    , decltype(_impl_.ledger_id_){}
    , decltype(_impl_.mining_points_){}
    , decltype(_impl_.luck_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cur_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cur_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cur_hash().empty()) {
    _this->_impl_.cur_hash_.Set(from._internal_cur_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.prev_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_hash().empty()) {
    _this->_impl_.prev_hash_.Set(from._internal_prev_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contained_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contained_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contained_data().empty()) {
    _this->_impl_.contained_data_.Set(from._internal_contained_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mined_by()) {
    _this->_impl_.mined_by_ = new ::block_external::v1::Block_Key(*from._impl_.mined_by_);
  }
  ::memcpy(&_impl_.unix_timestamp_, &from._impl_.unix_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.luck_) -
    reinterpret_cast<char*>(&_impl_.unix_timestamp_)) + sizeof(_impl_.luck_));
  // @@protoc_insertion_point(copy_constructor:block_external.v1.Block)
}

inline void Block::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_hash_){}
    , decltype(_impl_.prev_hash_){}
    , decltype(_impl_.contained_data_){}
    , decltype(_impl_.mined_by_){nullptr}
    , decltype(_impl_.unix_timestamp_){uint64_t{0u}}
    , decltype(_impl_.ledger_id_){uint64_t{0u}}
    , decltype(_impl_.mining_points_){uint64_t{0u}}
    , decltype(_impl_.luck_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cur_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cur_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.prev_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contained_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contained_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:block_external.v1.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cur_hash_.Destroy();
  _impl_.prev_hash_.Destroy();
  _impl_.contained_data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mined_by_;
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:block_external.v1.Block)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cur_hash_.ClearToEmpty();
  _impl_.prev_hash_.ClearToEmpty();
  _impl_.contained_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.mined_by_ != nullptr) {
    delete _impl_.mined_by_;
  }
  _impl_.mined_by_ = nullptr;
  ::memset(&_impl_.unix_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.luck_) -
      reinterpret_cast<char*>(&_impl_.unix_timestamp_)) + sizeof(_impl_.luck_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes cur_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cur_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes prev_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prev_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 unix_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unix_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .block_external.v1.Block.Key mined_by = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mined_by(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ledger_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ledger_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 mining_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mining_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double luck = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.luck_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes contained_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_contained_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Block::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:block_external.v1.Block)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cur_hash = 1;
  if (!this->_internal_cur_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_cur_hash(), target);
  }

  // bytes prev_hash = 2;
  if (!this->_internal_prev_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_prev_hash(), target);
  }

  // uint64 unix_timestamp = 3;
  if (this->_internal_unix_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_unix_timestamp(), target);
  }

  // .block_external.v1.Block.Key mined_by = 4;
  if (this->_internal_has_mined_by()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mined_by(this),
        _Internal::mined_by(this).GetCachedSize(), target, stream);
  }

  // uint64 ledger_id = 5;
  if (this->_internal_ledger_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ledger_id(), target);
  }

  // uint64 mining_points = 6;
  if (this->_internal_mining_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_mining_points(), target);
  }

  // double luck = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_luck = this->_internal_luck();
  uint64_t raw_luck;
  memcpy(&raw_luck, &tmp_luck, sizeof(tmp_luck));
  if (raw_luck != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_luck(), target);
  }

  // bytes contained_data = 8;
  if (!this->_internal_contained_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_contained_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:block_external.v1.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:block_external.v1.Block)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cur_hash = 1;
  if (!this->_internal_cur_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_cur_hash());
  }

  // bytes prev_hash = 2;
  if (!this->_internal_prev_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prev_hash());
  }

  // bytes contained_data = 8;
  if (!this->_internal_contained_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contained_data());
  }

  // .block_external.v1.Block.Key mined_by = 4;
  if (this->_internal_has_mined_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mined_by_);
  }

  // uint64 unix_timestamp = 3;
  if (this->_internal_unix_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_unix_timestamp());
  }

  // uint64 ledger_id = 5;
  if (this->_internal_ledger_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ledger_id());
  }

  // uint64 mining_points = 6;
  if (this->_internal_mining_points() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mining_points());
  }

  // double luck = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_luck = this->_internal_luck();
  uint64_t raw_luck;
  memcpy(&raw_luck, &tmp_luck, sizeof(tmp_luck));
  if (raw_luck != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:block_external.v1.Block)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cur_hash().empty()) {
    _this->_internal_set_cur_hash(from._internal_cur_hash());
  }
  if (!from._internal_prev_hash().empty()) {
    _this->_internal_set_prev_hash(from._internal_prev_hash());
  }
  if (!from._internal_contained_data().empty()) {
    _this->_internal_set_contained_data(from._internal_contained_data());
  }
  if (from._internal_has_mined_by()) {
    _this->_internal_mutable_mined_by()->::block_external::v1::Block_Key::MergeFrom(
        from._internal_mined_by());
  }
  if (from._internal_unix_timestamp() != 0) {
    _this->_internal_set_unix_timestamp(from._internal_unix_timestamp());
  }
  if (from._internal_ledger_id() != 0) {
    _this->_internal_set_ledger_id(from._internal_ledger_id());
  }
  if (from._internal_mining_points() != 0) {
    _this->_internal_set_mining_points(from._internal_mining_points());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_luck = from._internal_luck();
  uint64_t raw_luck;
  memcpy(&raw_luck, &tmp_luck, sizeof(tmp_luck));
  if (raw_luck != 0) {
    _this->_internal_set_luck(from._internal_luck());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:block_external.v1.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cur_hash_, lhs_arena,
      &other->_impl_.cur_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_hash_, lhs_arena,
      &other->_impl_.prev_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contained_data_, lhs_arena,
      &other->_impl_.contained_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.luck_)
      + sizeof(Block::_impl_.luck_)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.mined_by_)>(
          reinterpret_cast<char*>(&_impl_.mined_by_),
          reinterpret_cast<char*>(&other->_impl_.mined_by_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_BlockExternal_2eproto_getter, &descriptor_table_BlockExternal_2eproto_once,
      file_level_metadata_BlockExternal_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace block_external
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::block_external::v1::Block_Key*
Arena::CreateMaybeMessage< ::block_external::v1::Block_Key >(Arena* arena) {
  return Arena::CreateMessageInternal< ::block_external::v1::Block_Key >(arena);
}
template<> PROTOBUF_NOINLINE ::block_external::v1::Block*
Arena::CreateMaybeMessage< ::block_external::v1::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::block_external::v1::Block >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
