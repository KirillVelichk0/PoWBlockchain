// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/proto/BlockExternal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fBlockExternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fBlockExternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fproto_2fBlockExternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fproto_2fBlockExternal_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fproto_2fBlockExternal_2eproto;
namespace block_external {
namespace v1 {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class Block_Key;
struct Block_KeyDefaultTypeInternal;
extern Block_KeyDefaultTypeInternal _Block_Key_default_instance_;
}  // namespace v1
}  // namespace block_external
PROTOBUF_NAMESPACE_OPEN
template<> ::block_external::v1::Block* Arena::CreateMaybeMessage<::block_external::v1::Block>(Arena*);
template<> ::block_external::v1::Block_Key* Arena::CreateMaybeMessage<::block_external::v1::Block_Key>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace block_external {
namespace v1 {

// ===================================================================

class Block_Key final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:block_external.v1.Block.Key) */ {
 public:
  inline Block_Key() : Block_Key(nullptr) {}
  ~Block_Key() override;
  explicit PROTOBUF_CONSTEXPR Block_Key(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block_Key(const Block_Key& from);
  Block_Key(Block_Key&& from) noexcept
    : Block_Key() {
    *this = ::std::move(from);
  }

  inline Block_Key& operator=(const Block_Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block_Key& operator=(Block_Key&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block_Key& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block_Key* internal_default_instance() {
    return reinterpret_cast<const Block_Key*>(
               &_Block_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Block_Key& a, Block_Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Block_Key* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block_Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block_Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block_Key>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block_Key& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block_Key& from) {
    Block_Key::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block_Key* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "block_external.v1.Block.Key";
  }
  protected:
  explicit Block_Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // uint64 x = 1;
  void clear_x();
  uint64_t x() const;
  void set_x(uint64_t value);
  private:
  uint64_t _internal_x() const;
  void _internal_set_x(uint64_t value);
  public:

  // uint64 y = 2;
  void clear_y();
  uint64_t y() const;
  void set_y(uint64_t value);
  private:
  uint64_t _internal_y() const;
  void _internal_set_y(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:block_external.v1.Block.Key)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t x_;
    uint64_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fBlockExternal_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:block_external.v1.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Block& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Block& from) {
    Block::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "block_external.v1.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Block_Key Key;

  // accessors -------------------------------------------------------

  enum : int {
    kCurHashFieldNumber = 1,
    kPrevHashFieldNumber = 2,
    kContainedDataFieldNumber = 8,
    kUnixTimestampFieldNumber = 3,
    kMinedByFieldNumber = 4,
    kLedgerIdFieldNumber = 5,
    kMiningPointsFieldNumber = 6,
    kLuckFieldNumber = 7,
  };
  // bytes cur_hash = 1;
  void clear_cur_hash();
  const std::string& cur_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cur_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cur_hash();
  PROTOBUF_NODISCARD std::string* release_cur_hash();
  void set_allocated_cur_hash(std::string* cur_hash);
  private:
  const std::string& _internal_cur_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cur_hash(const std::string& value);
  std::string* _internal_mutable_cur_hash();
  public:

  // bytes prev_hash = 2;
  void clear_prev_hash();
  const std::string& prev_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_hash();
  PROTOBUF_NODISCARD std::string* release_prev_hash();
  void set_allocated_prev_hash(std::string* prev_hash);
  private:
  const std::string& _internal_prev_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_hash(const std::string& value);
  std::string* _internal_mutable_prev_hash();
  public:

  // bytes contained_data = 8;
  void clear_contained_data();
  const std::string& contained_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contained_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contained_data();
  PROTOBUF_NODISCARD std::string* release_contained_data();
  void set_allocated_contained_data(std::string* contained_data);
  private:
  const std::string& _internal_contained_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contained_data(const std::string& value);
  std::string* _internal_mutable_contained_data();
  public:

  // .google.protobuf.Timestamp unix_timestamp = 3;
  bool has_unix_timestamp() const;
  private:
  bool _internal_has_unix_timestamp() const;
  public:
  void clear_unix_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& unix_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_unix_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_unix_timestamp();
  void set_allocated_unix_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* unix_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_unix_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_unix_timestamp();
  public:
  void unsafe_arena_set_allocated_unix_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* unix_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_unix_timestamp();

  // .block_external.v1.Block.Key mined_by = 4;
  bool has_mined_by() const;
  private:
  bool _internal_has_mined_by() const;
  public:
  void clear_mined_by();
  const ::block_external::v1::Block_Key& mined_by() const;
  PROTOBUF_NODISCARD ::block_external::v1::Block_Key* release_mined_by();
  ::block_external::v1::Block_Key* mutable_mined_by();
  void set_allocated_mined_by(::block_external::v1::Block_Key* mined_by);
  private:
  const ::block_external::v1::Block_Key& _internal_mined_by() const;
  ::block_external::v1::Block_Key* _internal_mutable_mined_by();
  public:
  void unsafe_arena_set_allocated_mined_by(
      ::block_external::v1::Block_Key* mined_by);
  ::block_external::v1::Block_Key* unsafe_arena_release_mined_by();

  // uint64 ledger_id = 5;
  void clear_ledger_id();
  uint64_t ledger_id() const;
  void set_ledger_id(uint64_t value);
  private:
  uint64_t _internal_ledger_id() const;
  void _internal_set_ledger_id(uint64_t value);
  public:

  // uint64 mining_points = 6;
  void clear_mining_points();
  uint64_t mining_points() const;
  void set_mining_points(uint64_t value);
  private:
  uint64_t _internal_mining_points() const;
  void _internal_set_mining_points(uint64_t value);
  public:

  // double luck = 7;
  void clear_luck();
  double luck() const;
  void set_luck(double value);
  private:
  double _internal_luck() const;
  void _internal_set_luck(double value);
  public:

  // @@protoc_insertion_point(class_scope:block_external.v1.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contained_data_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* unix_timestamp_;
    ::block_external::v1::Block_Key* mined_by_;
    uint64_t ledger_id_;
    uint64_t mining_points_;
    double luck_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fproto_2fBlockExternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block_Key

// uint64 x = 1;
inline void Block_Key::clear_x() {
  _impl_.x_ = uint64_t{0u};
}
inline uint64_t Block_Key::_internal_x() const {
  return _impl_.x_;
}
inline uint64_t Block_Key::x() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.Key.x)
  return _internal_x();
}
inline void Block_Key::_internal_set_x(uint64_t value) {
  
  _impl_.x_ = value;
}
inline void Block_Key::set_x(uint64_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:block_external.v1.Block.Key.x)
}

// uint64 y = 2;
inline void Block_Key::clear_y() {
  _impl_.y_ = uint64_t{0u};
}
inline uint64_t Block_Key::_internal_y() const {
  return _impl_.y_;
}
inline uint64_t Block_Key::y() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.Key.y)
  return _internal_y();
}
inline void Block_Key::_internal_set_y(uint64_t value) {
  
  _impl_.y_ = value;
}
inline void Block_Key::set_y(uint64_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:block_external.v1.Block.Key.y)
}

// -------------------------------------------------------------------

// Block

// bytes cur_hash = 1;
inline void Block::clear_cur_hash() {
  _impl_.cur_hash_.ClearToEmpty();
}
inline const std::string& Block::cur_hash() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.cur_hash)
  return _internal_cur_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_cur_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cur_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_external.v1.Block.cur_hash)
}
inline std::string* Block::mutable_cur_hash() {
  std::string* _s = _internal_mutable_cur_hash();
  // @@protoc_insertion_point(field_mutable:block_external.v1.Block.cur_hash)
  return _s;
}
inline const std::string& Block::_internal_cur_hash() const {
  return _impl_.cur_hash_.Get();
}
inline void Block::_internal_set_cur_hash(const std::string& value) {
  
  _impl_.cur_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_cur_hash() {
  
  return _impl_.cur_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_cur_hash() {
  // @@protoc_insertion_point(field_release:block_external.v1.Block.cur_hash)
  return _impl_.cur_hash_.Release();
}
inline void Block::set_allocated_cur_hash(std::string* cur_hash) {
  if (cur_hash != nullptr) {
    
  } else {
    
  }
  _impl_.cur_hash_.SetAllocated(cur_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cur_hash_.IsDefault()) {
    _impl_.cur_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_external.v1.Block.cur_hash)
}

// bytes prev_hash = 2;
inline void Block::clear_prev_hash() {
  _impl_.prev_hash_.ClearToEmpty();
}
inline const std::string& Block::prev_hash() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.prev_hash)
  return _internal_prev_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_prev_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_hash_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_external.v1.Block.prev_hash)
}
inline std::string* Block::mutable_prev_hash() {
  std::string* _s = _internal_mutable_prev_hash();
  // @@protoc_insertion_point(field_mutable:block_external.v1.Block.prev_hash)
  return _s;
}
inline const std::string& Block::_internal_prev_hash() const {
  return _impl_.prev_hash_.Get();
}
inline void Block::_internal_set_prev_hash(const std::string& value) {
  
  _impl_.prev_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_prev_hash() {
  
  return _impl_.prev_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_prev_hash() {
  // @@protoc_insertion_point(field_release:block_external.v1.Block.prev_hash)
  return _impl_.prev_hash_.Release();
}
inline void Block::set_allocated_prev_hash(std::string* prev_hash) {
  if (prev_hash != nullptr) {
    
  } else {
    
  }
  _impl_.prev_hash_.SetAllocated(prev_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_hash_.IsDefault()) {
    _impl_.prev_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_external.v1.Block.prev_hash)
}

// .google.protobuf.Timestamp unix_timestamp = 3;
inline bool Block::_internal_has_unix_timestamp() const {
  return this != internal_default_instance() && _impl_.unix_timestamp_ != nullptr;
}
inline bool Block::has_unix_timestamp() const {
  return _internal_has_unix_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Block::_internal_unix_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.unix_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Block::unix_timestamp() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.unix_timestamp)
  return _internal_unix_timestamp();
}
inline void Block::unsafe_arena_set_allocated_unix_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* unix_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unix_timestamp_);
  }
  _impl_.unix_timestamp_ = unix_timestamp;
  if (unix_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:block_external.v1.Block.unix_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::release_unix_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.unix_timestamp_;
  _impl_.unix_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::unsafe_arena_release_unix_timestamp() {
  // @@protoc_insertion_point(field_release:block_external.v1.Block.unix_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.unix_timestamp_;
  _impl_.unix_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::_internal_mutable_unix_timestamp() {
  
  if (_impl_.unix_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.unix_timestamp_ = p;
  }
  return _impl_.unix_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Block::mutable_unix_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_unix_timestamp();
  // @@protoc_insertion_point(field_mutable:block_external.v1.Block.unix_timestamp)
  return _msg;
}
inline void Block::set_allocated_unix_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* unix_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unix_timestamp_);
  }
  if (unix_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unix_timestamp));
    if (message_arena != submessage_arena) {
      unix_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unix_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unix_timestamp_ = unix_timestamp;
  // @@protoc_insertion_point(field_set_allocated:block_external.v1.Block.unix_timestamp)
}

// .block_external.v1.Block.Key mined_by = 4;
inline bool Block::_internal_has_mined_by() const {
  return this != internal_default_instance() && _impl_.mined_by_ != nullptr;
}
inline bool Block::has_mined_by() const {
  return _internal_has_mined_by();
}
inline void Block::clear_mined_by() {
  if (GetArenaForAllocation() == nullptr && _impl_.mined_by_ != nullptr) {
    delete _impl_.mined_by_;
  }
  _impl_.mined_by_ = nullptr;
}
inline const ::block_external::v1::Block_Key& Block::_internal_mined_by() const {
  const ::block_external::v1::Block_Key* p = _impl_.mined_by_;
  return p != nullptr ? *p : reinterpret_cast<const ::block_external::v1::Block_Key&>(
      ::block_external::v1::_Block_Key_default_instance_);
}
inline const ::block_external::v1::Block_Key& Block::mined_by() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.mined_by)
  return _internal_mined_by();
}
inline void Block::unsafe_arena_set_allocated_mined_by(
    ::block_external::v1::Block_Key* mined_by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mined_by_);
  }
  _impl_.mined_by_ = mined_by;
  if (mined_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:block_external.v1.Block.mined_by)
}
inline ::block_external::v1::Block_Key* Block::release_mined_by() {
  
  ::block_external::v1::Block_Key* temp = _impl_.mined_by_;
  _impl_.mined_by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::block_external::v1::Block_Key* Block::unsafe_arena_release_mined_by() {
  // @@protoc_insertion_point(field_release:block_external.v1.Block.mined_by)
  
  ::block_external::v1::Block_Key* temp = _impl_.mined_by_;
  _impl_.mined_by_ = nullptr;
  return temp;
}
inline ::block_external::v1::Block_Key* Block::_internal_mutable_mined_by() {
  
  if (_impl_.mined_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::block_external::v1::Block_Key>(GetArenaForAllocation());
    _impl_.mined_by_ = p;
  }
  return _impl_.mined_by_;
}
inline ::block_external::v1::Block_Key* Block::mutable_mined_by() {
  ::block_external::v1::Block_Key* _msg = _internal_mutable_mined_by();
  // @@protoc_insertion_point(field_mutable:block_external.v1.Block.mined_by)
  return _msg;
}
inline void Block::set_allocated_mined_by(::block_external::v1::Block_Key* mined_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mined_by_;
  }
  if (mined_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mined_by);
    if (message_arena != submessage_arena) {
      mined_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mined_by, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mined_by_ = mined_by;
  // @@protoc_insertion_point(field_set_allocated:block_external.v1.Block.mined_by)
}

// uint64 ledger_id = 5;
inline void Block::clear_ledger_id() {
  _impl_.ledger_id_ = uint64_t{0u};
}
inline uint64_t Block::_internal_ledger_id() const {
  return _impl_.ledger_id_;
}
inline uint64_t Block::ledger_id() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.ledger_id)
  return _internal_ledger_id();
}
inline void Block::_internal_set_ledger_id(uint64_t value) {
  
  _impl_.ledger_id_ = value;
}
inline void Block::set_ledger_id(uint64_t value) {
  _internal_set_ledger_id(value);
  // @@protoc_insertion_point(field_set:block_external.v1.Block.ledger_id)
}

// uint64 mining_points = 6;
inline void Block::clear_mining_points() {
  _impl_.mining_points_ = uint64_t{0u};
}
inline uint64_t Block::_internal_mining_points() const {
  return _impl_.mining_points_;
}
inline uint64_t Block::mining_points() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.mining_points)
  return _internal_mining_points();
}
inline void Block::_internal_set_mining_points(uint64_t value) {
  
  _impl_.mining_points_ = value;
}
inline void Block::set_mining_points(uint64_t value) {
  _internal_set_mining_points(value);
  // @@protoc_insertion_point(field_set:block_external.v1.Block.mining_points)
}

// double luck = 7;
inline void Block::clear_luck() {
  _impl_.luck_ = 0;
}
inline double Block::_internal_luck() const {
  return _impl_.luck_;
}
inline double Block::luck() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.luck)
  return _internal_luck();
}
inline void Block::_internal_set_luck(double value) {
  
  _impl_.luck_ = value;
}
inline void Block::set_luck(double value) {
  _internal_set_luck(value);
  // @@protoc_insertion_point(field_set:block_external.v1.Block.luck)
}

// bytes contained_data = 8;
inline void Block::clear_contained_data() {
  _impl_.contained_data_.ClearToEmpty();
}
inline const std::string& Block::contained_data() const {
  // @@protoc_insertion_point(field_get:block_external.v1.Block.contained_data)
  return _internal_contained_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Block::set_contained_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.contained_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:block_external.v1.Block.contained_data)
}
inline std::string* Block::mutable_contained_data() {
  std::string* _s = _internal_mutable_contained_data();
  // @@protoc_insertion_point(field_mutable:block_external.v1.Block.contained_data)
  return _s;
}
inline const std::string& Block::_internal_contained_data() const {
  return _impl_.contained_data_.Get();
}
inline void Block::_internal_set_contained_data(const std::string& value) {
  
  _impl_.contained_data_.Set(value, GetArenaForAllocation());
}
inline std::string* Block::_internal_mutable_contained_data() {
  
  return _impl_.contained_data_.Mutable(GetArenaForAllocation());
}
inline std::string* Block::release_contained_data() {
  // @@protoc_insertion_point(field_release:block_external.v1.Block.contained_data)
  return _impl_.contained_data_.Release();
}
inline void Block::set_allocated_contained_data(std::string* contained_data) {
  if (contained_data != nullptr) {
    
  } else {
    
  }
  _impl_.contained_data_.SetAllocated(contained_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contained_data_.IsDefault()) {
    _impl_.contained_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:block_external.v1.Block.contained_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace block_external

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fproto_2fBlockExternal_2eproto
